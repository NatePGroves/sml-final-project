}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
B <- 2000
med.bootsample <- rep(NA, B)
set.seed(5678)
for (k in 1:B){
bootsample <- sample(Boston$medv, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
se_boot <- sd(bootsample)/sqrt(n)
se_boot
t.test(Boston$medv)
2*0.4118526
22.53281-0.8237052
22.53281+0.8237052
summary(med.bootsample)
conf.level <- 0.95 # 95% CI, alpha = 0.05.
alp <- 1 - conf.level
bootCI <- quantile(med.bootsample, c( alp/2, 1-alp/2))
bootCI.Normal <- mean(med.bootsample) + c(-1, 1)*qnorm(1-alp/2, mean=0, sd=1)*sd(med.bootsample)
rbind(bootCI, bootCI.Normal)
median(Boston$medv)
summary(med.bootsample)
median(Boston$medv)
median(Boston$medv)
boot.ci(bootsample, type=c("norm"))
library(boot)
boot.ci(bootsample, type=c("norm"))
boot.ci(bootsample, type=c("norm"))
boot(data=Boston$medv, statistic = med.fn, R = 8000)
22.53281
library(boot)
med.fn <- function(x, inds){
return(median(x[inds]))
}
boot(data=Boston$medv, statistic = med.fn, R = 8000)
boot.ci(bootsample, type=c("norm"))
medv.boot <- boot(data=Boston$medv, statistic = med.fn, R = 8000)
boot.ci(medv.boot, type=c("norm"))
med.fn <- function(x, inds){
return(median(x[inds]))
}
medv.boot <- boot(data=Boston$medv, statistic = med.fn, R = 8000)
boot.ci(medv.boot, type=c("norm"))
1+3+4.5+6.5
15/4
2-3.75
3/3.75
3-3.75
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
data(birthwt)
library(MASS)
data(birthwt)
# Do NOT use variable bwt (last column) in this problem.
midterm.data <- birthwt[, -ncol(birthwt)]
# Declare categorical predictors.
midterm.data$race <- factor(midterm.data$race, labels=c("white", "black", "other"))
midterm.data$smoke <- factor(midterm.data$smoke, labels=c("NoSmoking", "Smoking"))
midterm.data$ht <- factor(midterm.data$ht, labels=c("NoHypertesion", "Hypertesion"))
midterm.data$ui <- factor(midterm.data$ui, labels=c("NoUI", "UI"))
# Quick review
summary(midterm.data)
model1 <- glm(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data=birthwt, family=binomial)
model1
# Use the last 4 digits of your student ID to set seed.
set.seed(1019)
model1 <- glm(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data=birthwt, family=binomial)
model1
# Use the last 4 digits of your student ID to set seed.
set.seed(1019)
model1 <- glm(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data=birthwt, family=binomial)
model1
# Use the last 4 digits of your student ID to set seed.
set.seed(1019)
model1 <- glm(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data=midterm.data, family=binomial)
model1
model2 <- step(model1)
model1 <- glm(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data=midterm.data, family=binomial)
model1
model2 <- step(model1)
model2 <- step(model1)
model2 <- step(model1)
summary(model2)
model2 <- step(model1)
summary(model2)
roc.analysis <-function (object, newdata = NULL, newplot=TRUE)
{
if (is.null(newdata)) {
pi.tp <- object$fitted[object$y == 1]
pi.tn <- object$fitted[object$y == 0]
}
else {
pi.tp <- predict(object, newdata, type = "response")[newdata$y == 1]
pi.tn <- predict(object, newdata, type = "response")[newdata$y == 0]
}
pi.all <- sort(c(pi.tp, pi.tn))
sens <- rep(1, length(pi.all)+1)
specc <- rep(1, length(pi.all)+1)
for (i in 1:length(pi.all)) {
sens[i+1] <- mean(pi.tp >= pi.all[i], na.rm = T)
specc[i+1] <- mean(pi.tn >= pi.all[i], na.rm = T)
}
npoints <- length(sens)
area <- sum(0.5 * (sens[-1] + sens[-npoints]) * (specc[-npoints] -
specc[-1]))
lift <- (sens - specc)[-1]
cutoff <- pi.all[lift == max(lift)][1]
sensopt <- sens[-1][lift == max(lift)][1]
specopt <- 1 - specc[-1][lift == max(lift)][1]
par(pty="s")
if (newplot){
plot(specc, sens, xlim = c(0, 1), ylim = c(0, 1), type = "s",
xlab = "FPR = 1-specificity", ylab = "TPR = sensitivity", main="ROC")
abline(0, 1)
}
else lines(specc, sens, type="s", lty=2, col=2)
list(pihat=as.vector(pi.all), sens=as.vector(sens[-1]),
spec=as.vector(1-specc[-1]), area = area, cutoff = cutoff,
sensopt = sensopt, specopt = specopt)
}
set.seed(1019)
train.pct <- 0.70
Z <- sample(nrow(midterm.data), train.pct*nrow(midterm.data))
training <- midterm.data[Z]
training <- midterm.data[Z]
Z <- sample(nrow(midterm.data), train.pct*nrow(midterm.data))
training <- midterm.data[Z]
testing <- midterm.data[-Z]
testing
midterm.data
training <- midterm.data[Z,]
testing <- midterm.data[-Z,]
training
train.ROC <- roc.analysis(model1)
low.testing$y <- 1*(testing$lwt == 1)
testing$y <- 1*(testing$lwt == 1)
test.ROC <- roc.analysis(model1, newdata=depr.testing, newplot=F)
test.ROC <- roc.analysis(model1, newdata=testing, newplot=F)
set.seed(1019)
train.pct <- 0.70
Z <- sample(nrow(midterm.data), train.pct*nrow(midterm.data))
training <- midterm.data[Z,]
testing <- midterm.data[-Z,]
train.ROC <- roc.analysis(model1)
testing$y <- 1*(testing$lwt == 1)
test.ROC <- roc.analysis(model1, newdata=testing, newplot=F)
train.ROC <- roc.analysis(model1)
train.ROC2 <- roc.analysis(model2)
train.ROC1 <- roc.analysis(model1)
train.ROC2 <- roc.analysis(model2)
train.ROC1 <- roc.analysis(model1)
train.ROC2 <- roc.analysis(model2)
train.ROC2 <- roc.analysis(model2)
train.ROC1$area
train.ROC2$area
library(boot)
cv.error <- cv.glm(data=midterm.data, glmfit=model1)
cv.error$delta
cv.error1
cv.error
set.seed(1019)
cv.error1 <- cv.glm(data=midterm.data, glmfit=model1)
cv.error1$delta
cv.error2 <- cv.glm(data=midterm.data, glmfit=model2)
cv.error2$delt
model3 <- qda(low~age+lwt+ptl+ftv, data=midterm.data)
summary(model3)
B <- 8000 # number of Bootstrap samples
n <- length(midterm.data$low)
med.bootsample <- rep(NA, B)
for (k in 1:B){
bootsample <- sample(midterm.data$low, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
conf.level <- 0.95 # 95% CI, alpha = 0.05.
alp <- 1 - conf.level
bootCI <- quantile(med.bootsample, c( alp/2, 1-alp/2))
bootCI.Normal <- mean(med.bootsample) + c(-1, 1)*qnorm(1-alp/2, mean=0, sd=1)*sd(med.bootsample)
rbind(bootCI, bootCI.Normal
rbind(bootCI, bootCI.Normal)
B <- 8000 # number of Bootstrap samples
n <- length(midterm.data$low)
med.bootsample <- rep(NA, B)
for (k in 1:B){
bootsample <- sample(midterm.data$low, size=n, replace = TRUE)
}
conf.level <- 0.95 # 95% CI, alpha = 0.05.
alp <- 1 - conf.level
bootCI <- quantile(med.bootsample, c( alp/2, 1-alp/2))
B <- 8000 # number of Bootstrap samples
n <- length(midterm.data$low)
med.bootsample <- rep(NA, B)
for (k in 1:B){
bootsample <- sample(midterm.data$low, size=n, replace = TRUE)
med.bootsample[k] <- median(bootsample)
}
conf.level <- 0.95 # 95% CI, alpha = 0.05.
alp <- 1 - conf.level
bootCI <- quantile(med.bootsample, c( alp/2, 1-alp/2))
bootCI.Normal <- mean(med.bootsample) + c(-1, 1)*qnorm(1-alp/2, mean=0, sd=1)*sd(med.bootsample)
rbind(bootCI, bootCI.Normal)
bootCI <- quantile(med.bootsample, c( alp/2, 1-alp/2))
bootCI
knitr::opts_chunk$set(echo = TRUE)
circulation <- read_csv("..\sml-final-project\library_circulation.csv")
circulation <- read_csv("../sml-final-project/library_circulation.csv")
library(tidyverse)
circulation <- read_csv("../sml-final-project/library_circulation.csv")
demographics <- <- read_csv("../sml-final-project/library_demographics.csv")
demographics <- read_csv("../sml-final-project/library_demographics.csv")
electronic <- read_csv("../sml-final-project/library_electronic.csv")
programs <- read_csv("../sml-final-project/library_programs.csv")
revenue <- read_csv("../sml-final-project/library_revenue.csv")
services <- read_csv("../sml-final-project/library_services.csv")
summary(circulation)
libraries <- inner_join(circulation, demographics, by = "FSCS Key")
libraries
libraries <- inner_join(circulation, demographics, electronic, by = "FSCS Key")
libraries
libraries <- inner_join(circulation, demographics, by = "FSCS Key")
libraries
libraries <- full_join(circulation, demographics, by = "FSCS Key")
libraries
libraries <- inner_join(circulation, demographics, by = "FSCS Key")
libraries
libraries <- inner_join(libraries, electronic, by = "FSCS Key")
?inner_join
libraries
libraries <- inner_join(libraries, programs, by = "FSCS Key")
libraries <- inner_join(circulation, demographics, by = "FSCS Key")
libraries <- inner_join(libraries, electronic, by = "FSCS Key")
libraries <- inner_join(libraries, programs, by = "FSCS Key")
libraries <- inner_join(libraries, revenue, by = "FSCS Key")
libraries <- inner_join(libraries, services, by = "FSCS Key")
libraries
variable.names(libraries)
libraries_clean <- select(!"Library Name.y", !"Locale.y", !"Service Area Population.y" )
libraries_clean <- select("Library Name.y", "Locale.y", "Service Area Population.y" )
libraries_clean <- libraries|>
select("Library Name.y", "Locale.y", "Service Area Population.y" )
libraries_clean <- libraries|>
select(!"Library Name.y")
libraries_clean <- libraries|>
select(!"Library Name.y", !"Locale.y")
libraries_clean <- libraries|>
select(!"Library Name.y", !"Locale.y", !"Service Area Population.y", !"Library Name.x.x" ,!"Locale.x.x",                                !"Suppression Note.x" )
libraries_clean <- libraries|>
select(!"Library Name.y", !"Locale.y", !"Service Area Population.y", !"Library Name.x.x" ,!"Locale.x.x",  !"Suppression Note.x", !"Service Area Population.x.x", !"Library Name.y.y",  !"Locale.y.y", !"Service Area Population.y.y")
libraries_clean <- libraries|>
select(!"Library Name.y", !"Locale.y", !"Service Area Population.y", !"Library Name.x.x" ,!"Locale.x.x",  !"Suppression Note.x", !"Service Area Population.x.x", !"Library Name.y.y",  !"Locale.y.y", !"Service Area Population.y.y", !"Library Name.x.x.x", !"Locale.x.x.x", !"Suppression Note.y", !"Service Area Population.x.x.x", !"Library Name.y.y.y", !"Locale.y.y.y", !"Service Area Population.y.y.y")
variable.names(libraries_clean)
libraries_clean <- libraries|>
select(c("Library Name.y", "Locale.y", "Service Area Population.y"))
libraries_clean
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y"))
libraries_clean
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))
variable.names(libraries_clean)
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(rename("Library Name"="Library Name.x" ), rename("Locale"="Locale.x" ), rename("Service Area Population"="Service Area Population.x"))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(rename("Library Name"="Library Name.x" ))#, rename("Locale"="Locale.x" ), rename("Service Area Population"="Service Area Population.x"))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(rename('Library Name'="Library Name.x" ))#, rename("Locale"="Locale.x" ), rename("Service Area Population"="Service Area Population.x"))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(recode('Library Name'="Library Name.x" ))#, rename("Locale"="Locale.x" ), rename("Service Area Population"="Service Area Population.x"))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(recode("Library Name"="Library Name.x" ))#, rename("Locale"="Locale.x" ), rename("Service Area Population"="Service Area Population.x"))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(rename("Library Name"="Library Name.x" ))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
mutate(rename("Library Name"="Library Name.x"))
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
rename("Library Name"="Library Name.x")
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
rename("Library Name"="Library Name.x", "Locale"="Locale.x", "Service Area Population"="Service Area Population.x")
variable.names(libraries_clean)
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
rename("Library Name"="Library Name.x", "Locale"="Locale.x", "Service Area Population"="Service Area Population.x")
variable.names(libraries_clean)
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
rename("Library Name"="Library Name.x", "Locale"="Locale.x", "Service Area Population"="Service Area Population.x", "Service Hours/Year"="Hours/Year")
variable.names(libraries_clean)
libraries_clean <- libraries|>
select(!c("Library Name.y", "Locale.y", "Service Area Population.y", "Library Name.x.x" ,"Locale.x.x",  "Suppression Note.x", "Service Area Population.x.x", "Library Name.y.y",  "Locale.y.y", "Service Area Population.y.y", "Library Name.x.x.x", "Locale.x.x.x", "Suppression Note.y", "Service Area Population.x.x.x", "Library Name.y.y.y", "Locale.y.y.y", "Service Area Population.y.y.y"))|>
rename("Library Name"="Library Name.x", "Locale"="Locale.x", "Service Area Population"="Service Area Population.x", "Service Hours per Year"="Hours/Year")
variable.names(libraries_clean)
setwd("C:/Users/18582/OneDrive/Desktop/College/Fall 2025/Statistical Machine Learning/sml-final-project")
histogram(libraries_clean$`Total Circulation`)
hist(libraries_clean$`Total Circulation`)
summary(libraries_clean$`Total Circulation`)
libraries_clean|>
recode("Total Circulation", -3=NA)
libraries_clean|>
recode("Total Circulation", -3==NA)
?recode
libraries_clean|>
case_match("Total Circulation", "-3"==NA)
libraries_clean|>
case_match("Total Circulation", "-3"~NA)
libraries_clean|>
case_match("Total Circulation", -3~NA)
libraries_clean|>
recode("Total Circulation", -3 = NA)
libraries_clean|>
mutate(recode("Total Circulation", -3 = NA))
knitr::opts_chunk$set(echo = TRUE)
# Quick review
summary(midterm.data)
library(MASS)
data(birthwt)
# Do NOT use variable bwt (last column) in this problem.
midterm.data <- birthwt[, -ncol(birthwt)]
# Declare categorical predictors.
midterm.data$race <- factor(midterm.data$race, labels=c("white", "black", "other"))
midterm.data$smoke <- factor(midterm.data$smoke, labels=c("NoSmoking", "Smoking"))
midterm.data$ht <- factor(midterm.data$ht, labels=c("NoHypertesion", "Hypertesion"))
midterm.data$ui <- factor(midterm.data$ui, labels=c("NoUI", "UI"))
# Quick review
summary(midterm.data)
# Use the last 4 digits of your student ID to set seed.
set.seed(1019)
model1 <- glm(low ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data=midterm.data, family=binomial)
model1
model2 <- step(model1)
summary(model2)
model2 <- step(model1, direction="both")
summary(model2)
roc.analysis <-function (object, newdata = NULL, newplot=TRUE)
{
if (is.null(newdata)) {
pi.tp <- object$fitted[object$y == 1]
pi.tn <- object$fitted[object$y == 0]
}
else {
pi.tp <- predict(object, newdata, type = "response")[newdata$y == 1]
pi.tn <- predict(object, newdata, type = "response")[newdata$y == 0]
}
pi.all <- sort(c(pi.tp, pi.tn))
sens <- rep(1, length(pi.all)+1)
specc <- rep(1, length(pi.all)+1)
for (i in 1:length(pi.all)) {
sens[i+1] <- mean(pi.tp >= pi.all[i], na.rm = T)
specc[i+1] <- mean(pi.tn >= pi.all[i], na.rm = T)
}
npoints <- length(sens)
area <- sum(0.5 * (sens[-1] + sens[-npoints]) * (specc[-npoints] -
specc[-1]))
lift <- (sens - specc)[-1]
cutoff <- pi.all[lift == max(lift)][1]
sensopt <- sens[-1][lift == max(lift)][1]
specopt <- 1 - specc[-1][lift == max(lift)][1]
par(pty="s")
if (newplot){
plot(specc, sens, xlim = c(0, 1), ylim = c(0, 1), type = "s",
xlab = "FPR = 1-specificity", ylab = "TPR = sensitivity", main="ROC")
abline(0, 1)
}
else lines(specc, sens, type="s", lty=2, col=2)
list(pihat=as.vector(pi.all), sens=as.vector(sens[-1]),
spec=as.vector(1-specc[-1]), area = area, cutoff = cutoff,
sensopt = sensopt, specopt = specopt)
}
train.ROC1 <- roc.analysis(model1)
train.ROC1$area
train.ROC2 <- roc.analysis(model2)
train.ROC2$area
cv.error1 <- cv.glm(data=midterm.data, glmfit=model1, loss=.5)
library(boot)
cv.error1 <- cv.glm(data=midterm.data, glmfit=model1, loss=.5)
return(mean(Y==1 & pred.p < .5) | (Y==0 & pred.p >= .5)))
return(mean(Y==1 & pred.p < .5) | (Y==0 & pred.p >= .5))
set.seed(1019)
#you originally forgot to add the loss function
err_rate <- function(Y, pred.p){
return(mean(Y==1 & pred.p < .5) | (Y==0 & pred.p >= .5))
}
cv.error1 <- cv.glm(data=midterm.data, glmfit=model1)
cv.error1$delta
cv.error1 <- cv.glm(data=midterm.data, glmfit=model1, cost=err_rate)
cv.error1$delta
return(mean(Y==1 & pred.p < .5) | (Y==0 & pred.p >= .5)) #mean is giving the proportion of errors
set.seed(1019)
#you originally forgot to add the loss function
err_rate <- function(Y, pred.p){
return(mean(Y==1 & pred.p < .5) | (Y==0 & pred.p >= .5)) #mean is giving the proportion of errors
}
cv.error1 <- cv.glm(data=midterm.data, glmfit=model1, cost=err_rate)
cv.error1$delta
cv.error1$delta
cv.error2$delt
cv.error2 <- cv.glm(data=midterm.data, glmfit=model2)
cv.error2$delt
cv.error1$delta
cv.error1$delt
cv.error2 <- cv.glm(data=midterm.data, glmfit=model2, cost=err_rate())
cv.error2 <- cv.glm(data=midterm.data, glmfit=model2, cost=err_rate)
cv.error2$delt
model3 <- qda(low~age+lwt+ptl+ftv, data=midterm.data, CV=TRUE)
model3
qda.error <- mean(model3$class !=midterm.data$low)
qda.error
return(exp(glmout$coefficents["smokeSmoking"]))
return(exp(glmout$coefficents["smokeSmoking"]))
oddsratio <- function(DF, inds){
glmout <- glm(low ~., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio, R=8000)
midterm.boot <- boot(midterm.data, oddsratio, R=8000)
boot.ci <- midterm.boot, type=c("norm", "perc", "basic")
oddsratio <- function(DF, inds){
glmout <- glm(low ~., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio, R=8000)
oddsratio_fn <- function(DF, inds){
glmout <- glm(low ~., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
boot(midterm.data, oddsratio_fn, R=8000)
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
glmout <- glm(low ~ ., family=binomial, data=midterm.data[inds,])
oddsratio_fn <- function(DF, inds){
glmout <- glm(low ~ ., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
return(exp(glmout$coefficents["smokeSmoking"]))}
return(exp(glmout$coefficents["smokeSmoking"]))}
oddsratio_fn <- function(DF, inds){
glmout <- glm(low ~ ., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
oddsratio_fn <- function(DF, inds){
glmout <- glm(low ~ ., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents[smokeSmoking]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
return(exp(glmout$coefficents["smokeSmoking"]))
oddsratio_fn <- function(DF, inds){
glmout <- glm(low ~ ., family=binomial, data=midterm.data[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
#actual answer
oddsratio_fn <- function(dF, inds){
glmout <- glm(low ~ ., family=binomial, data=df[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
midterm.data
#actual answer
oddsratio_fn <- function(df, inds){
glmout <- glm(low ~ ., family=binomial, data=df[inds,])
return(exp(glmout$coefficents["smokeSmoking"]))
}
midterm.boot <- boot(midterm.data, oddsratio_fn, R=8000)
View(libraries_clean)
